syntax = "proto3";

package management.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "inventory/v1/nodes.proto";
import "inventory/v1/services.proto";
import "management/v1/annotation.proto";
import "management/v1/external.proto";
import "management/v1/haproxy.proto";
import "management/v1/mongodb.proto";
import "management/v1/mysql.proto";
import "management/v1/node.proto";
import "management/v1/postgresql.proto";
import "management/v1/proxysql.proto";
import "management/v1/rds.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

message AddServiceRequest {
  oneof service {
    AddMySQLServiceParams mysql = 1;
    AddMongoDBServiceParams mongodb = 2;
    AddPostgreSQLServiceParams postgresql = 3;
    AddProxySQLServiceParams proxysql = 4;
    AddHAProxyServiceParams haproxy = 5;
    AddExternalServiceParams external = 6;
    AddRDSServiceParams rds = 7;
  }
}

message AddServiceResponse {
  oneof service {
    MySQLServiceResult mysql = 1;
    MongoDBServiceResult mongodb = 2;
    PostgreSQLServiceResult postgresql = 3;
    ProxySQLServiceResult proxysql = 4;
    HAProxyServiceResult haproxy = 5;
    ExternalServiceResult external = 6;
    RDSServiceResult rds = 7;
  }
}

message RemoveServiceRequest {
  // Either a Service ID or a Service Name.
  string service_id = 1;
  // Service type.
  inventory.v1.ServiceType service_type = 2;
}

message RemoveServiceResponse {}

message UnregisterNodeRequest {
  // Node_id to be unregistered.
  string node_id = 1 [(validate.rules).string.min_len = 1];
  // Force delete node, related service account, even if it has more service tokens attached.
  bool force = 2;
}

message UnregisterNodeResponse {
  // Warning message if there are more service tokens attached to service account.
  string warning = 1;
}

message UniversalNode {
  // Node status.
  enum Status {
    // Invalid status.
    STATUS_UNSPECIFIED = 0;
    // The node is up.
    STATUS_UP = 1;
    // The node is down.
    STATUS_DOWN = 2;
    // The node's status cannot be known (e.g. there are no metrics yet).
    STATUS_UNKNOWN = 3;
  }
  // Service represents a service running on a node.
  message Service {
    // Unique Service identifier.
    string service_id = 1;
    // Service type.
    string service_type = 2;
    // Service name.
    string service_name = 3;
  }

  message Agent {
    // Unique Agent identifier.
    string agent_id = 1;
    // Agent type.
    string agent_type = 2;
    // Actual Agent status.
    string status = 3;
    // True if Agent is running and connected to pmm-managed.
    bool is_connected = 4;
  }

  // Unique Node identifier.
  string node_id = 1;
  // Node type.
  string node_type = 2;
  // User-defined node name.
  string node_name = 3;
  // Linux machine-id.
  string machine_id = 4;
  // Linux distribution name and version.
  string distro = 5;
  // Node model.
  string node_model = 6;
  // A node's unique docker container identifier.
  string container_id = 7;
  // Container name.
  string container_name = 8;
  // Node address (DNS name or IP).
  string address = 9;
  // Node region.
  string region = 10;
  // Node availability zone.
  string az = 11;
  // Custom user-assigned labels for Node.
  map<string, string> custom_labels = 12;
  // Creation timestamp.
  google.protobuf.Timestamp created_at = 13;
  // Last update timestamp.
  google.protobuf.Timestamp updated_at = 14;
  // The health status of the node.
  Status status = 15;
  // List of agents related to this node.
  repeated Agent agents = 16;
  // List of services running on this node.
  repeated Service services = 17;
}

message ListNodesRequest {
  // Node type to be filtered out.
  inventory.v1.NodeType node_type = 1;
}

message ListNodesResponse {
  repeated UniversalNode nodes = 1;
}

message GetNodeRequest {
  // Unique Node identifier.
  string node_id = 1 [(validate.rules).string.min_len = 1];
}

message GetNodeResponse {
  UniversalNode node = 1;
}

// ManagementService provides public methods for managing and querying Services.
service ManagementService {
  // AddAnnotation adds an annotation.
  rpc AddAnnotation(AddAnnotationRequest) returns (AddAnnotationResponse) {
    option (google.api.http) = {
      post: "/v1/management/annotations"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add an Annotation"
      description: "Adds an annotation."
    };
  }
  // RegisterNode registers a new Node and a pmm-agent.
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse) {
    option (google.api.http) = {
      post: "/v1/management/nodes"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Register a Node"
      description: "Registers a new Node and a pmm-agent."
    };
  }
  // UnregisterNode unregisters a Node, pmm-agent and removes the service account and its token.
  rpc UnregisterNode(UnregisterNodeRequest) returns (UnregisterNodeResponse) {
    option (google.api.http) = {delete: "/v1/management/nodes/{node_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Unregister a Node"
      description: "Unregisters a Node and pmm-agent"
    };
  }
  // ListNode returns a list of nodes.
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse) {
    option (google.api.http) = {get: "/v1/management/nodes"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Nodes"
      description: "Returns a filtered list of Nodes."
    };
  }
  // GetNode returns a single Node by ID.
  rpc GetNode(GetNodeRequest) returns (GetNodeResponse) {
    option (google.api.http) = {
      get: "/v1/management/nodes/{node_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Node"
      description: "Returns a single Node by ID."
    };
  }
  // AddExternal adds external service and adds external exporter.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds an "external exporter" agent to inventory, which is running on provided "runs_on_node_id".

  // AddMySQL adds MySQL Service and starts several Agents.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "mysqld_exporter", and "qan_mysql_perfschema" agents
  // with provided "pmm_agent_id" and other parameters.

  // AddMongoDB adds MongoDB Service and starts several Agents.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "mongodb_exporter", and "qan_mongodb_profiler" agents
  // with provided "pmm_agent_id" and other parameters.

  // AddPostgreSQL adds PostgreSQL Service and starts postgres exporter.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "postgres_exporter" with provided "pmm_agent_id" and other parameters.

  // AddHAProxy adds HAProxy service and adds external exporter.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds an "external exporter" agent to inventory.

  // AddProxySQL adds ProxySQL Service and starts several Agents.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "proxysql_exporter" with provided "pmm_agent_id" and other parameters.

  // AddService adds a Service and starts several Agents.
  rpc AddService(AddServiceRequest) returns (AddServiceResponse) {
    option (google.api.http) = {
      post: "/v1/management/services"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add a Service"
      description: "Adds a service and starts several agents."
    };
  }
  // DiscoverRDS discovers RDS instances.
  rpc DiscoverRDS(DiscoverRDSRequest) returns (DiscoverRDSResponse) {
    option (google.api.http) = {
      post: "/v1/management/services:discoverRDS"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Discover RDS"
      description: "Discovers RDS instances."
    };
  }
  // RemoveService removes a Service along with its Agents.
  rpc RemoveService(RemoveServiceRequest) returns (RemoveServiceResponse) {
    option (google.api.http) = {delete: "/v1/management/services/{service_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove a Service"
      description: "Removes a Service along with its Agents."
    };
  }
}
