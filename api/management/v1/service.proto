syntax = "proto3";

package management.v1;

import "google/api/annotations.proto";
import "inventory/v1/services.proto";
import "management/v1/annotation.proto";
import "management/v1/external.proto";
import "management/v1/haproxy.proto";
import "management/v1/mongodb.proto";
import "management/v1/mysql.proto";
import "management/v1/node.proto";
import "management/v1/postgresql.proto";
import "management/v1/proxysql.proto";
import "management/v1/rds.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

message AddServiceRequest {
  oneof service {
    AddMySQLServiceParams mysql = 1;
    AddMongoDBServiceParams mongodb = 2;
    AddPostgreSQLServiceParams postgresql = 3;
    AddProxySQLServiceParams proxysql = 4;
    AddHAProxyServiceParams haproxy = 5;
    AddExternalServiceParams external = 6;
    AddRDSServiceParams rds = 7;
  }
}

message AddServiceResponse {
  oneof service {
    MySQLServiceResult mysql = 1;
    MongoDBServiceResult mongodb = 2;
    PostgreSQLServiceResult postgresql = 3;
    ProxySQLServiceResult proxysql = 4;
    HAProxyServiceResult haproxy = 5;
    ExternalServiceResult external = 6;
    RDSServiceResult rds = 7;
  }
}

message RemoveServiceRequest {
  // Either a Service ID or a Service Name.
  string service_id = 1;
  // Service type.
  inventory.v1.ServiceType service_type = 2;
}

message RemoveServiceResponse {}

// ManagementService provides public methods for managing and querying Services.
service ManagementService {
  // AddAnnotation adds an annotation.
  rpc AddAnnotation(AddAnnotationRequest) returns (AddAnnotationResponse) {
    option (google.api.http) = {
      post: "/v1/management/annotations"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add an Annotation"
      description: "Adds an annotation."
    };
  }
  // RegisterNode registers a new Node and a pmm-agent.
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse) {
    option (google.api.http) = {
      post: "/v1/management/nodes"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Register a Node"
      description: "Registers a new Node and a pmm-agent."
    };
  }

  // AddExternal adds external service and adds external exporter.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds an "external exporter" agent to inventory, which is running on provided "runs_on_node_id".

  // AddMySQL adds MySQL Service and starts several Agents.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "mysqld_exporter", and "qan_mysql_perfschema" agents
  // with provided "pmm_agent_id" and other parameters.

  // AddMongoDB adds MongoDB Service and starts several Agents.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "mongodb_exporter", and "qan_mongodb_profiler" agents
  // with provided "pmm_agent_id" and other parameters.

  // AddPostgreSQL adds PostgreSQL Service and starts postgres exporter.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "postgres_exporter" with provided "pmm_agent_id" and other parameters.

  // AddHAProxy adds HAProxy service and adds external exporter.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds an "external exporter" agent to inventory.

  // AddProxySQL adds ProxySQL Service and starts several Agents.
  // It automatically adds a service to inventory, which is running on provided "node_id",
  // then adds "proxysql_exporter" with provided "pmm_agent_id" and other parameters.

  // AddService adds a Service and starts several Agents.
  rpc AddService(AddServiceRequest) returns (AddServiceResponse) {
    option (google.api.http) = {
      post: "/v1/management/services"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add a Service"
      description: "Adds a service and starts several agents."
    };
  }
  // DiscoverRDS discovers RDS instances.
  rpc DiscoverRDS(DiscoverRDSRequest) returns (DiscoverRDSResponse) {
    option (google.api.http) = {
      post: "/v1/management/services:discoverRDS"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Discover RDS"
      description: "Discovers RDS instances."
    };
  }
  // RemoveService removes a Service along with its Agents.
  rpc RemoveService(RemoveServiceRequest) returns (RemoveServiceResponse) {
    option (google.api.http) = {delete: "/v1/management/services/{service_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove a Service"
      description: "Removes a Service along with its Agents."
    };
  }
}
